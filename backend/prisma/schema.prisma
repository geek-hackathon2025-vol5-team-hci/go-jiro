// Prismaスキーマファイルです。
// 詳細はドキュメントを参照してください: https://pris.ly/d/prisma-schema

// データベース接続を定義します
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // docker-compose.ymlの環境変数を使用します
}

// Prisma Clientジェネレーターを定義します
generator client {
  provider = "prisma-client-js"
}

// アプリケーションコードに合わせたAccessLogモデルを定義します
model AccessLog {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
}

// お店の情報を格納するモデル
model Shop {
  id        String  @id 
  name      String
  address   String?
  latitude  Float    // 緯度
  longitude Float    // 経度
  callticketOrder String?
  callOrder   String?
  callRules   CallRule[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jiro_difficulty Int //次郎難易度
}

model CallRule {
  id        Int      @id @default(autoincrement())
  shopId    String      // どの店舗のルールかを示すID
  category  String   // カテゴリ (例: "ヤサイ", "ニンニク")
  option    String   // 選択肢 (例: "少なめ", "多め（マシ）")
  callText  String   // 出力されるコール文言 (例: "ヤサイスクナメ")
  optionOrder Int?
  
  // Shopモデルとのリレーションを定義
  shop      Shop     @relation(fields: [shopId], references: [id])

  @@unique([shopId, category, option]) // 同じ店の同じルールの重複を防ぐ
}


// ユーザー情報を格納するモデルを追加します
model User {
  id           Int      @id @default(autoincrement())
  googleId    String   @unique // Googleから提供されるユニークなID
  email        String   @unique
  displayName String?
  username     String?  @unique // ユーザー名は他の人と重複しないように設定
  jiroCount    Int      @default(0) // 二郎を食べた回数。デフォルトは0
  favoriteCall String?  // 好きなコールは任意登録
  age          Int?     // 年齢は任意登録
  gender       String?  // 性別は任意登録
  createdAt    DateTime @default(now()) // ユーザー登録日
}